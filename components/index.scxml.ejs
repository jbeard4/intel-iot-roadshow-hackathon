<?xml version="1.0" encoding="UTF-8"?> 
<scxml xmlns="http://www.w3.org/2005/07/scxml" name="morse" datamodel="ecmascript" version="1.0"> 
  <script>
    var textToMorse = require('../morse-code.json');
    var util = require('../device/util');

    var m = require('mraa'); //require mraa
    console.log('MRAA Version: ' + m.getVersion()); //write the mraa version to the console

    //TODO: move pin configuration into environment variables

    var groveSensor = require('jsupm_grove');

    var myLed = new m.Gpio(4); //LED hooked up to digital pin 13 
    myLed.dir(m.DIR_OUT); //set the gpio direction to output

    var myBuzzer = new m.Gpio(3); //LED hooked up to digital pin 13 
    myBuzzer.dir(m.DIR_OUT); //set the gpio direction to output

    // Create the button object using GPIO pin 0
    var button = new groveSensor.GroveButton(2);

    // Load lcd module on I2C
    var LCD = require('jsupm_i2clcd');

    // Initialize Jhd1313m1 at 0x62 (RGB_ADDRESS) and 0x3E (LCD_ADDRESS) 
    var myLcd = new LCD.Jhd1313m1 (0, 0x3E, 0x62);

    var hardware = {
      led : myLed,
      buzzer : myBuzzer,
      lcd : myLcd,
      button : button
    };

    function readButtonValue() {
      var currentButtonState = hardware.button.value();
      var eventName = currentButtonState ? 'device.press' : 'device.release';
      this.send({name : eventName});
    }
  </script>
  <state id="main">
    <transition event="error.*">
      <log label="uncaught error" expr="_event.data.message"/>
    </transition>
    <onentry>
      <script>
        setInterval(readButtonValue.bind(this), 30); 
      </script>
    </onentry>
    <parallel id="input_mode">
      <state id="event_processor">
        <datamodel>
          <data id="dot_duration" expr="250"/>
        </datamodel>
        <state id="released">
          <onentry>
            <script>
              hardware.led.write(0);
              hardware.buzzer.write(0);
            </script>
          </onentry>
          <state id="initial">
            <onentry>
              <send id="short_pause_timeout" event="short_pause_timeout" delayexpr="dot_duration * 3 + 'ms'"/>
            </onentry>
            <onexit>
              <cancel sendid="short_pause_timeout"/>
            </onexit>
            <transition event="short_pause_timeout" target="short_pause">
            </transition>
            <transition event="device.press" target="pressed">
            </transition>
          </state> 
          <state id="short_pause">
            <onentry>
              <send id="long_pause_timeout" event="long_pause_timeout" delayexpr="dot_duration * 4 + 'ms'"/>
              <send event="short_pause"/> 
            </onentry>
            <onexit>
              <cancel sendid="long_pause_timeout"/>
            </onexit>
            <transition event="long_pause_timeout" target="long_pause"/>
            <transition event="device.press" target="pressed"/>
          </state> 
          <state id="long_pause">
            <onentry>
              <send event="long_pause"/> 
            </onentry>
            <transition event="device.press" target="pressed"></transition>
          </state> 
        </state>
        <state id="pressed">
          <onentry>
            <script>
              hardware.led.write(1);
              hardware.buzzer.write(1);
            </script>
          </onentry>
          <state id="sending_dot">
            <onentry>
              <send id="dash-timeout" event="dash-timeout" delayexpr="dot_duration * 3 + 'ms'"/>
            </onentry>
            <onexit>
              <cancel sendid="dash-timeout"/>
            </onexit>
            <transition event="dash-timeout" target="sending_dash"/>
            <transition event="device.release" target="released">
              <send event="dot"/> 
            </transition>
          </state>
          <state id="sending_dash">
            <onentry>
              <send id="long_press_timeout" event="long_press_timeout" delayexpr="dot_duration * 4 + 'ms'"/>
            </onentry>
            <onexit>
              <cancel sendid="long_press_timeout"/>
            </onexit>
            <transition event="device.release" target="released">
              <send event="dash"/> 
            </transition>
            <transition event="long_press_timeout" target="output_mode"></transition>
          </state>
        </state> 
      </state>
      <state id="parsing_state">
        <datamodel>
          <data id="buffer"/>
        </datamodel>
        <onentry>
          <script>
            buffer = '';
            hardware.lcd.clear();
          </script>
        </onentry>
        <transition target="parsing_state" event="reset"/> 
        <% states.map(function(state){ %>
          <state id="<%= state.id %>"> 
            <% if (state.emit){ %>
              <onentry>
                <script>
                  buffer += "<%= state.emit %>";
                  hardware.lcd.write("<%= state.emit %>");
                </script>
              </onentry>
              <transition target="idle"/>
            <% } %>
            <% state.transitions.map(function(t){ %>
              <transition target="<%= t.target %>" event="<%= t.event %>"/> 
            <% }) %>
            <% if( state.id === 'idle' ){ %>
              <transition target="idle" event="long_pause">
              </transition>
            <% } %>
          </state> 
        <% }) %>
      </state>
    </parallel>
    <state id="output_mode">
      <state id="fetching_page">
        <onentry>
          <script>
            buffer = 'slashdot.org';
            util.fetchPage(buffer, function(err, text){
              if(err) return this.send({name : 'fetch.error',data : err});
              this.send({name : 'fetch.success',data : text});
            }.bind(this));
          </script>
        </onentry>
        <transition event="fetch.success" target="outputting_page"/>
        <transition event="fetch.error" target="fetch_page_error"/>
      </state>
      <state id="no_text">

      </state>
      <state id="outputting_page">
        <datamodel>
          <data id="words"/>
          <data id="word"/>
          <data id="morseSequence"/>
          <data id="morseChar"/>
        </datamodel>
        <onentry>
          <script>
            words = 
              _event.data.split(/\s+/g).map(function(word){
                return {
                  original : word,
                  morse : 
                    word.split('').map(function(c){
                      return {
                        original : c,
                        morse : textToMorse[c]
                      };
                    }).filter(function(o){
                      return o.morse;
                    })
                 };
              });

            //init
            word = words.dequeue();   
            morseSequence = word.morse.dequeue();
          </script>
        </onentry>

        <state id="loop">
          <onentry>
            <script>
              morseChar = morseSequence.morse.dequeue();

              var timeout;
              switch(morseChar){
                case '.':
                  timeout = dot_duration;
                  break;
                case '-':
                  timeout = dot_duration * 3;
                  break;
                default:
                  throw new Error('Unexpected morse char');
              }

              if(morseChar){
                this.send({name : 'buzzer.timeout'}, {delay : timeout});
              }else{
                morseSequence = word.morse.dequeue();
                if(morseSequence){
                  this.send({name : 'word.delay'}, {delay : dot_duration * 3});
                }else{
                  word = words.dequeue();   
                  if(word){
                    this.send({name : 'sequence.delay'}, {delay : dot_duration * 7});
                  }else{
                    this.send({name : 'words.loop.done'});
                  }
                }
              }
            </script>
          </onentry>
          <transition target="buzzer_on" cond="morseChar"/>
          <transition target="loop" event="word.delay sequence.delay"/>
          <transition target="input_mode" event="words.loop.done"/>
        </state>
        <state id="buzzer_on">
          <onentry>
            <script>
              hardware.led.write(1);
              hardware.buzzer.write(1);
            </script>
          </onentry>
          <onexit>
            <script>
              hardware.led.write(0);
              hardware.buzzer.write(0);
            </script>
          </onexit>
          <transition target="loop" event="buzzer.timeout"/>
        </state>
      </state>
      <state id="fetch_page_error">
        <onentry>
          <script>
            hardware.lcd.clear();
            hardware.lcd.write(_event.data.message);
          </script>
        </onentry>
      </state>
      <transition target="input_mode" event="device.press"/>
    </state>
  </state>
</scxml>
